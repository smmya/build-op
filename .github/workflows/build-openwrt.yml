
name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
        
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  REPO_URL_LIENOL: https://github.com/Lienol/openwrt
  REPO_BRANCH_LIENOL: 21.02
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  TZ: Asia/Shanghai
  DEVICE1: new3
  DEVICE2: r3g
  DEVICE3: n1-docker
  DEVICE4: n1-flash
  UPLOAD_DOCKERHUB: true
  UPLOAD_OUTPUT: true

jobs:
   new3:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: load environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack neofetch antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
      
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL_LIENOL -b $REPO_BRANCH_LIENOL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt


    - name: deal with config
      run: |
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE1 }}/.config $GITHUB_WORKSPACE/openwrt/
        cd openwrt
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE1 }}/.config $GITHUB_WORKSPACE/openwrt/
        ./scripts/feeds install -a

    - name: Personalized script
      run: |
        cd openwrt
        sed -i 's/192.168.1.1/192.168.123.1/g' package/base-files/files/bin/config_generate
        neofetch

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc)
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: env.UPLOAD_OUTPUT == 'true' && !cancelled()
      with:
        name: Op-${{ env.DEVICE1 }}--${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
    
    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ env.DEVICE1 }}--${{ env.FILE_DATE }}"
        artifacts: "openwrt/bin/targets/*/*/*"
        body: "192.168.123.1_password"
    
        
        
   r3g:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: load environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 neofetch aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
      
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: deal with config
      run: |
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE2 }}/.config $GITHUB_WORKSPACE/openwrt/
        cd openwrt
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE2 }}/.config $GITHUB_WORKSPACE/openwrt/
        ./scripts/feeds install -a

    - name: Personalized script
      run: |
        cd openwrt
        sed -i 's/192.168.1.1/192.168.123.1/g' package/base-files/files/bin/config_generate
        neofetch

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc)
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: env.UPLOAD_OUTPUT == 'true' && !cancelled()
      with:
        name: Op-${{ env.DEVICE2 }}--${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
    
    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ env.DEVICE2 }}--${{ env.FILE_DATE }}"
        artifacts: "openwrt/bin/targets/*/*/*"
        body: "192.168.123.1_password"
        
  
   n1-docker:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: load environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 neofetch aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
      
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt


    - name: deal with config
      run: |
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE3 }}/.config $GITHUB_WORKSPACE/openwrt/
        cd openwrt
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE3 }}/.config $GITHUB_WORKSPACE/openwrt/
        ./scripts/feeds install -a

    - name: Personalized script
      run: |
        cd openwrt
        sed -i 's/192.168.1.1/192.168.123.253/g' package/base-files/files/bin/config_generate
        neofetch

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc)
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: build docker image
      run: |
       cd $GITHUB_WORKSPACE/ && sudo mkdir make_docker
       cd $GITHUB_WORKSPACE/make_docker && sudo -E git clone -b main https://github.com/smmya/make_op_n1 make_op_n1-main
       sudo -E cp $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default-rootfs.tar.gz  $GITHUB_WORKSPACE/make_docker/make_op_n1-main/
       cd $GITHUB_WORKSPACE/make_docker/make_op_n1-main && sudo -E bash build.sh latest
       cd $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/ && sudo -E mv openwrt-armvirt-64-default-rootfs.tar.gz docker-openwrt-armvirt-64-default-rootfs.tar.gz
       
    - name: push docker hub
      id: push
      if: env.UPLOAD_DOCKERHUB == 'true' && !cancelled()
      run: |
         cd $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/ && docker load --input docker-img-openwrt-aarch64-latest.gz
         docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
         docker push smmya/openwrt-aarch64-n1:latest
         sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default-rootfs.tar.gz
         sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/feeds.buildinfo
         sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default.manifest
         sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/config.buildinfo
         sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-Image

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: env.UPLOAD_OUTPUT == 'true' && !cancelled()
      with:
        name: Op-${{ env.DEVICE3 }}--${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
    
    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ env.DEVICE3 }}--${{ env.FILE_DATE }}"
        artifacts: "openwrt/bin/targets/*/*/*"
        body: "192.168.123.1_password"
  
  
   n1-flash:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: load environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 neofetch aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 curl gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf
       
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: deal with config
      run: |
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE4 }}/.config $GITHUB_WORKSPACE/openwrt/
        cd openwrt
        echo "src-git kenzo https://github.com/kenzok8/openwrt-packages" >> ./feeds.conf.default
        echo "src-git small https://github.com/kenzok8/small" >> ./feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        cp -f $GITHUB_WORKSPACE/${{ env.DEVICE4 }}/.config $GITHUB_WORKSPACE/openwrt/
        ./scripts/feeds install -a

    - name: Personalized script
      run: |
        cd openwrt
        sed -i 's/192.168.1.1/192.168.123.253/g' package/base-files/files/bin/config_generate
        neofetch

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc)
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Package Armvirt as OpenWrt
      uses: unifreq/openwrt_packit@master
      env:
         OPENWRT_ARMVIRT: openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default-rootfs.tar.gz
         PACKAGE_SOC: s905d
         KERNEL_VERSION_NAME: 5.15.79
         SCRIPT_S905D: mk_s905d_n1.sh
         
    - name: sync image
      run: |
       cd $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/ && sudo -E mv openwrt-armvirt-64-default-rootfs.tar.gz flash-openwrt-armvirt-64-default-rootfs.tar.gz
       sudo -E cp -r /opt/openwrt_packit/output/* $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64
       sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default-rootfs.tar.gz
       sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/feeds.buildinfo
       sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default.manifest
       sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/config.buildinfo
       sudo -E rm -rf $GITHUB_WORKSPACE/openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-Image

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: env.UPLOAD_OUTPUT == 'true' && !cancelled()
      with:
        name: Op-${{ env.DEVICE4 }}--${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
    
    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      with:
        tag: "${{ env.DEVICE4 }}--${{ env.FILE_DATE }}"
        artifacts: "openwrt/bin/targets/*/*/*"
        body: "192.168.123.1_password"
  
